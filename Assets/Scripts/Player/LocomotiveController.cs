using UnityEngine;
using System.Linq;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.SceneManagement;

public class LocomotiveController : MonoBehaviour
{
<<<<<<< Updated upstream
    // —ÓÒÚÓˇÌËˇ ÚÂÔÂ¸ ÔÓ˘Â: Ï˚ ÎË·Ó ‰‚ËÊÂÏÒˇ, ÎË·Ó ÒÚÓËÏ Û ÒÚ‡ÌˆËË.
=======
    [SerializeField] private AudioSource trainAudioSource;
    [SerializeField] private AudioClip trainMovingClip;
    [SerializeField] private float fadeDuration = 3.0f; // –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞—Ç—É—Ö–∞–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    private Coroutine fadeOutCoroutine;
    [SerializeField] private AudioClip hornSound;
    // –°–æ—Å—Ç–æ—è–Ω–∏—è —Ç–µ–ø–µ—Ä—å –ø—Ä–æ—â–µ: –º—ã –ª–∏–±–æ –¥–≤–∏–∂–µ–º—Å—è, –ª–∏–±–æ —Å—Ç–æ–∏–º —É —Å—Ç–∞–Ω—Ü–∏–∏.
>>>>>>> Stashed changes
    public enum TrainState { Moving, DockedAtStation }

    private TrainState currentState;

    // –°—Å—ã–ª–∫–∏ –Ω–∞ –æ–±—ä–µ–∫—Ç—ã —Å—Ü–µ–Ω—ã
    public GameObject hornObject { get; private set; }
    private Animator hornAnimator;
    private AutoScrollParallax[] parallaxLayers;

    // –§–ª–∞–≥–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    private bool travelToStationUnlocked = false;
    private bool departureUnlocked = false;


    #region Unity Lifecycle
    void Awake()
    {
        FindSceneObjects();
        if (ExperienceManager.Instance != null)
        {
            ExperienceManager.Instance.OnPhaseUnlocked += OnPhaseUnlocked;
        }
    }

    void Start()
    {
        if (TransitionManager.isReturningFromStation)
        {
            TransitionManager.isReturningFromStation = false;
            OnReturnFromStation();
        }
        else
        {
            currentState = TrainState.Moving;
            CheckInitialTravelState();
        }
    }

    void LateUpdate()
    {
        UpdateHornHighlight();
        // –ü–æ—Å—Ç–æ—è–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º UI –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
        UIManager.Instance.ShowGoToStationButton(currentState == TrainState.DockedAtStation);
<<<<<<< Updated upstream
=======
        UpdateTrainSound();  // –æ–±–Ω–æ–≤–ª—è–µ–º –∑–≤—É–∫ –¥–≤–∏–∂–µ–Ω–∏—è

>>>>>>> Stashed changes
    }

<<<<<<< Updated upstream
=======
            if (!trainAudioSource.isPlaying)
            {
                trainAudioSource.clip = trainMovingClip;
                trainAudioSource.loop = true;
                trainAudioSource.volume = 0.1f; // –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –≤–µ—Ä–Ω—É—Ç—å –≥—Ä–æ–º–∫–æ—Å—Ç—å
                trainAudioSource.Play();
            }
        }
        else
        {
            // –ï—Å–ª–∏ –ø–æ–µ–∑–¥ –Ω–µ –¥–≤–∏–∂–µ—Ç—Å—è –∏ –∑–≤—É–∫ –∏–≥—Ä–∞–µ—Ç ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–≤–Ω–æ–µ –∑–∞—Ç—É—Ö–∞–Ω–∏–µ
            if (trainAudioSource.isPlaying && fadeOutCoroutine == null)
            {
                fadeOutCoroutine = StartCoroutine(FadeOutSound());
            }
        }
    }
    private IEnumerator FadeOutSound()
    {
        float startVolume = trainAudioSource.volume;
        float time = 0f;

        while (time < fadeDuration)
        {
            time += Time.deltaTime;
            trainAudioSource.volume = Mathf.Lerp(startVolume, 0f, time / fadeDuration);
            yield return null;
        }

        trainAudioSource.Stop();
        trainAudioSource.volume = 0.3f; // —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≥—Ä–æ–º–∫–æ—Å—Ç—å –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
        fadeOutCoroutine = null;
    }
>>>>>>> Stashed changes
    void OnDestroy()
    {
        if (ExperienceManager.Instance != null)
        {
            ExperienceManager.Instance.OnPhaseUnlocked -= OnPhaseUnlocked;
        }
    }
    #endregion

    #region Scene Object Management
    private void FindSceneObjects()
    {
        hornObject = GameObject.FindGameObjectWithTag("Horn");
        if (hornObject != null)
        {
            hornAnimator = hornObject.GetComponent<Animator>();
        }
        else Debug.LogError("[LocomotiveController] –ù–µ –Ω–∞–π–¥–µ–Ω –æ–±—ä–µ–∫—Ç —Å —Ç–µ–≥–æ–º 'Horn'!");

        parallaxLayers = GameObject.FindGameObjectsWithTag("ParallaxLayer")
            .Select(go => go.GetComponent<AutoScrollParallax>()).Where(c => c != null).ToArray();
    }
    #endregion

    #region Event Handlers & Core Logic
    public void OnHornClicked()
    {
        switch (currentState)
        {
            case TrainState.Moving:
                if (travelToStationUnlocked)
                {
                    ArriveAtStation();
                }
                break;
            case TrainState.DockedAtStation:
                if (departureUnlocked)
                {
                    StartCoroutine(DepartSequence());
                }
                else
                {
                    Debug.Log("–ì—É–¥–æ–∫ –Ω–∞–∂–∞—Ç, –Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ —Å—Ç–∞–Ω—Ü–∏–∏ –µ—â–µ –Ω–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ.");
                }
                break;
        }
    }

    public void OnGoToStationButtonPressed()
    {
        if (currentState == TrainState.DockedAtStation)
        {
            var currentClip = RadioManager.Instance.audioSource.clip;
            var currentTime = RadioManager.Instance.audioSource.time;
            var wasPlaying = RadioManager.IsPlaying;

            RadioManager.Instance.radioPanel?.SetActive(false);

            UIManager.Instance.ShowGoToStationButton(false); // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º

            // <<< –í–û–¢ –ö–õ–Æ–ß–ï–í–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï >>>
            // –ú—ã —Å–æ–æ–±—â–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä—É, —á—Ç–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ñ–∞–∑—É –°—Ç–∞–Ω—Ü–∏–∏.
            // –≠—Ç–æ –æ–±–Ω—É–ª–∏—Ç XP –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –∫–≤–µ—Å—Ç—ã –¥–ª—è —Å—Ç–∞–Ω—Ü–∏–∏.
            ExperienceManager.Instance.EnterStation();
            SceneManager.LoadScene("Station_1");
            StartCoroutine(LoadStationAndRestoreRadio(currentClip, currentTime, wasPlaying));
        }
    }

    private void OnPhaseUnlocked(int level, GamePhase phase)
    {
        if (phase == GamePhase.Train)
        {
            travelToStationUnlocked = true;
        }
        else if (phase == GamePhase.Station)
        {
            departureUnlocked = true;
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–ª–∞–≥ –≤ TransitionManager, —á—Ç–æ–±—ã –æ–Ω —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è –º–µ–∂–¥—É —Å—Ü–µ–Ω–∞–º–∏
            TransitionManager.isDepartureUnlocked = true;
        }
    }

    private void ArriveAtStation()
    {
        currentState = TrainState.DockedAtStation;
        // –ú—ã –ù–ï —Å–±—Ä–∞—Å—ã–≤–∞–µ–º travelToStationUnlocked, —á—Ç–æ–±—ã —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–æ—Å—å
        UIManager.Instance.ShowGoToStationButton(true);
        UIManager.Instance.ShowNotification(true);

        foreach (var layer in parallaxLayers) layer.enabled = false;

        // –í–ê–ñ–ù–û: –ú—ã –Ω–µ –≤—ã–∑—ã–≤–∞–µ–º AdvanceToNextPhase –∑–¥–µ—Å—å.
        // –°–º–µ–Ω–∞ —Ñ–∞–∑—ã –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–∏.
    }

    private void OnReturnFromStation()
    {
        // –ö–æ–≥–¥–∞ –º—ã –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è, –º—ã –≤—Å–µ –µ—â–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ "–ø—Ä–∏—Å—Ç—ã–∫–æ–≤–∞–Ω –∫ —Å—Ç–∞–Ω—Ü–∏–∏"
        currentState = TrainState.DockedAtStation;
        departureUnlocked = TransitionManager.isDepartureUnlocked;

        UIManager.Instance.ShowNotification(false);

        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–Ω, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –º–æ–≥ –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ü–µ–Ω—ã
        foreach (var layer in parallaxLayers) layer.enabled = false;
    }

    private IEnumerator DepartSequence()
    {
        currentState = TrainState.Moving;
        travelToStationUnlocked = false;
        departureUnlocked = false;
        TransitionManager.isDepartureUnlocked = false;

        UpdateHornHighlight();
        UIManager.Instance.ShowGoToStationButton(false);

        yield return StartCoroutine(ScreenFaderManager.Instance.FadeOutAndInCoroutine(() =>
        {
            // --- –î–ï–ô–°–¢–í–ò–Ø –í –°–ï–†–ï–î–ò–ù–ï –ó–ê–¢–ï–ú–ù–ï–ù–ò–Ø ---

            // 1. –°–æ–æ–±—â–∞–µ–º ExperienceManager, —á—Ç–æ –º—ã –ø–µ—Ä–µ—à–ª–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å
            ExperienceManager.Instance.DepartToNextTrainLevel();
            int newLevel = ExperienceManager.Instance.CurrentLevel; // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å

            // 2. –í–∫–ª—é—á–∞–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ –ø–∞—Ä–∞–ª–ª–∞–∫—Å–∞ –∏ —Å–æ–æ–±—â–∞–µ–º –∏–º –æ –Ω–æ–≤–æ–º —É—Ä–æ–≤–Ω–µ
            foreach (var layer in parallaxLayers)
            {
                layer.enabled = true;
                layer.SetSpriteForLevel(newLevel); // <<< –í–û–¢ –ö–õ–Æ–ß–ï–í–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï
            }

            // --- –ö–û–ù–ï–¶ –î–ï–ô–°–¢–í–ò–ô ---
        }));
    }


    private void CheckInitialTravelState()
    {
        if (ExperienceManager.Instance.CurrentPhase == GamePhase.Train &&
            ExperienceManager.Instance.CurrentXP >= ExperienceManager.Instance.XpForNextPhase)
        {
            travelToStationUnlocked = true;
        }
    }

    private void UpdateHornHighlight()
    {
        if (hornAnimator == null) return;
        bool shouldHighlight = (currentState == TrainState.Moving && travelToStationUnlocked) ||
                               (currentState == TrainState.DockedAtStation && departureUnlocked);
        hornAnimator.SetBool("IsHighlighted", shouldHighlight);
    }

    private IEnumerator LoadStationAndRestoreRadio(AudioClip clip, float time, bool play)
    {
        yield return new WaitForSeconds(0.1f);

        RadioManager.Instance.audioSource.clip = clip;
        RadioManager.Instance.audioSource.time = time;
        if (play)
        {
            RadioManager.Instance.audioSource.Play();
            RadioManager.IsPlaying = true;
        }
    }
    #endregion
}